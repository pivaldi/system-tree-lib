#!/usr/bin/env bash
# -*- tab-width: 2; encoding: utf-8 -*-

## @file
## @mainpage
## @line
## @author Philippe IVALDI <http://www.piprime.fr/>
## @brief The OLConfig Library is a small Bash script that acts as a library to configure projects
## in bash scripts.
## @copyright New BSD
## @version 0.1.0

# Do not edit this file. Just source it into your script
# and override the variables to change their value.

# Variables
# --------------------------------------------------------------#

## @var OLCONFIG_VERSION
## @brief OLConfig version number.
declare -r OLCONFIG_VERSION="0.1.0"

. $(dirname "${BASH_SOURCE[0]}")/bsfl/lib/bsfl.bash || exit 1

declare __DOING_MSG=

## Abort the process if the env var with the name $1 is not defined by name expeansion
## Example "_must_have_value APP_ROOT_PATH" abort if $APP_ROOT_PATH is empty
function _must_have_value() {
  has_value $1 || {
    msg_failed "The environment variable $1 is not defined"
    _abort
  }
}

function _doing() {
  stack_push "$1"
  msg "[Doing] ${1}…" "$BLUE"
}

function _done() {
  local DONE="${1:-DONE}"
  stack_pop
  local ERROR="$?"
  die_if_false $ERROR "Mo more message registered" "$(caller 0)"
  local DOING_MSG="$REGISTER"

  [ -z "$1" ] || DONE="$1"

  echo "$($GREEN) $($DEFAULT_CLR) ${DOING_MSG} : $($GREEN)$DONE$($DEFAULT_CLR)"
  echo
}

function _ntd() {
  _done 'Nothing to do…'
}

function _skipped() {
  echo "$($CYAN) $($DEFAULT_CLR) ${__DOING_MSG} : $($CYAN)SKIPPED$($DEFAULT_CLR)"
  echo
}

function _warn() {
  echo "$($YELLOW)⚠$($DEFAULT_CLR) ${__DOING_MSG} : $($BOLD)$($YELLOW)$1$($DEFAULT_CLR)$($OFFBOLD)"
  echo
}

function _fail() {
  echo "$($BOLD)$($RED) ${__DOING_MSG} : FAILED$($DEFAULT_CLR)$($OFFBOLD)"
  echo
}

function _abort_msg() {
  echo "$($BOLD)$($RED) PROCESS ABORTED$($DEFAULT_CLR)$($OFFBOLD)"
  echo
}

function _abort() {
  _abort_msg
  exit 1
}

## Overwrites olBash die command
die() {
  local -r err_code="$1"
  local -r err_msg="$2"
  local -r err_caller="${3:-$(caller 0)}"

  msg "\tERROR: $err_msg" "$RED"
  msg "\tERROR: At line $err_caller" "$RED"
  msg "\tERROR: Error code = $err_code" "$RED"
  $DEFAULT_CLR
  _abort_msg
  exit "$err_code"
} >&2 # function writes to stderr

function _do_or_die() {
  local COMMAND="$1"
  cmd "$COMMAND"
  local ERROR="$?"
  local MSG=''

  if option_enabled LOG_ENABLED; then
    MSG="\n\t -> Error are logged in the file ${LOG_FILE}."
  fi

  die_if_false "$ERROR" "Command '$COMMAND' failed.${MSG}" "$(caller 0)"
}

function _do() {
  # https://unix.stackexchange.com/questions/148109/shifting-command-output-to-the-right
  # echo "[Executing] '$1'"
  cmd "$1"
  # $1 || _fail | nl -bn
}
